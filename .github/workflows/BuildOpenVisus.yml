name: BuildOpenVisus

on: [push]

jobs:
        
  # ///////////////////////////////////////////////////////////////
  BuildOnWindowsJob:
  
    runs-on: windows-latest
    strategy:
      # max-parallel: 6
      matrix:
        python-version: [ '3.6', '3.7', '3.8' ]  
        
    steps:
    
    # ____________________________________________
    - name: Checkout
      uses: actions/checkout@v2
      
    # ____________________________________________
    - name: Install CMake
      uses: lukka/get-cmake@latest
      
    # ____________________________________________
    - name: Install Swig 
      uses: crazy-max/ghaction-chocolatey@v1
      with:
        args: install -y --allow-empty-checksums --no-progress cmake swig  
        
    # ____________________________________________
    - name: Install CPython 
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }} 
        architecture: 'x64'        
        
    # ____________________________________________
    - name: Install Qt 
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.9.2'
        arch: 'win64_msvc2017_64'
        install-deps: 'true'  
        dir: C:\

    # ____________________________________________
    - name: Compile OpenVisus 
      shell: bash
      run: |
           set -e  # stop or error
           set -x  # very verbose  
           
           PYTHON_VERSION=${{ matrix.python-version }}
           Python_EXECUTABLE=${pythonLocation}/python.exe
           Qt5_DIR=${Qt5_Dir}/lib/cmake/Qt5

           ${Python_EXECUTABLE} -m pip install numpy setuptools wheel twine --upgrade 1>/dev/null 
           
           mkdir -p build
           cd build    
           
           cmake -G "Visual Studio 16 2019" -A "x64" -DQt5_DIR="${Qt5_DIR}" -DPython_EXECUTABLE=${Python_EXECUTABLE} ../
           cmake --build . --target ALL_BUILD --config Release --parallel 4 
           cmake --build . --target INSTALL   --config Release
          
           cd Release/OpenVisus
           PYTHONPATH=../ ${Python_EXECUTABLE} -m OpenVisus test
           PYTHONPATH=../ ${Python_EXECUTABLE} -m OpenVisus convert    
                 
           GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || true)
          
           if [[ "${GIT_TAG}" != "" ]] ; then
             ${Python_EXECUTABLE} setup.py -q bdist_wheel --python-tag=cp${PYTHON_VERSION:0:1}${PYTHON_VERSION:2:1} --plat-name=win_amd64
             ${Python_EXECUTABLE} -m twine upload --username ${{ secrets.PYPI_USERNAME }} --password ${{ secrets.PYPI_PASSWORD }}   --skip-existing  "dist/*.whl" 
           fi               
      
    # ____________________________________________
    - name: Install Miniconda 
      uses: goanpeca/setup-miniconda@v1
      with:
        miniconda-version: 'latest'    
        python-version: ${{ matrix.python-version }}
        
    # ____________________________________________
    - name: Build OpenVisus conda package
      if: matrix.python-version != '3.8' 
      shell: bash -l {0}
      run: |
           cd build/Release/OpenVisus 
           conda update -n base -c defaults conda
           chmod a+x ./scripts/build_conda.sh
           ANACONDA_TOKEN=${{ secrets.ANACONDA_TOKEN }} PYTHON_VERSION=${{ matrix.python-version }} ./scripts/build_conda.sh

        
  # ///////////////////////////////////////////////////////////////
  BuildOnMacOsJob:
  
    runs-on: macos-latest
    strategy:
      # max-parallel: 6
      matrix:
        python-version: ['3.6', '3.7', '3.8' ]  
        
    steps:
    # ____________________________________________
    - name: Checkout
      uses: actions/checkout@v2
      
    # ____________________________________________
    - name: Install CMake
      uses: lukka/get-cmake@latest
            
    # ____________________________________________  
    - name: Install Swig
      run: brew install swig     
           
    # ____________________________________________
    - name: Install CPython 
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}     

    # ____________________________________________  
    - name: Install SDK 10.9
      run: cd /opt && git clone https://github.com/phracker/MacOSX-SDKs.git 
              
    # ____________________________________________
    - name: Install Qt 
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.9.3'
        target: 'desktop'
        install-deps: 'true'  
        dir: /opt

    # ____________________________________________
    - name: Compile OpenVisus 
      shell: bash
      run: |   
           set -e  # stop or error
           set -x  # very verbose  
           
           PYTHON_VERSION=${{ matrix.python-version }}  
           Python_EXECUTABLE=${pythonLocation}/python 
           Qt5_DIR=${Qt5_Dir}/lib/cmake/Qt5
           CMAKE_OSX_SYSROOT=/opt/MacOSX-SDKs/MacOSX10.9.sdk         
           
           ${Python_EXECUTABLE} -m pip install numpy setuptools wheel twine --upgrade 1>/dev/null 
           mkdir -p build
           cd build   
           
           cmake -GXcode -DPython_EXECUTABLE=${Python_EXECUTABLE} -DQt5_DIR=${Qt5_DIR} -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT} ../
           cmake --build ./ --target ALL_BUILD --config Release --parallel 4 
           cmake --build ./ --target install   --config Release
              
           cd Release/OpenVisus
           PYTHONPATH=../ ${Python_EXECUTABLE} -m OpenVisus test
           PYTHONPATH=../ ${Python_EXECUTABLE} -m OpenVisus convert  
              
           GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || true)
           if [[ "${GIT_TAG}" != ""  ]] ; then
              ${Python_EXECUTABLE} setup.py -q bdist_wheel --python-tag=cp${PYTHON_VERSION:0:1}${PYTHON_VERSION:2:1}  --plat-name=macosx_10_9_x86_64     
              ${Python_EXECUTABLE} -m twine upload --username ${{ secrets.PYPI_USERNAME }} --password ${{ secrets.PYPI_PASSWORD }}  --skip-existing  "dist/*.whl" 
           fi   
  
    # ____________________________________________
    - name: Install Miniconda 
      uses: goanpeca/setup-miniconda@v1
      with:
        miniconda-version: 'latest'    
        python-version: ${{ matrix.python-version }}
        
    # ____________________________________________
    - name: Build OpenVisus conda package
      if: matrix.python-version != '3.8' 
      shell: bash -l {0}
      run: |
           cd build/Release/OpenVisus 
           conda update -n base -c defaults conda
           chmod a+x ./scripts/build_conda.sh
           ANACONDA_TOKEN=${{ secrets.ANACONDA_TOKEN }} PYTHON_VERSION=${{ matrix.python-version }} ./scripts/build_conda.sh
       
  # ///////////////////////////////////////////////////////////////
  BuildOnUbuntuJob:
  
    runs-on: ubuntu-latest
    strategy:
      # max-parallel: 6
      matrix:
        python-version: ['3.6', '3.7', '3.8']  
        
    steps:
    # ____________________________________________
    - name: Checkout
      uses: actions/checkout@v2
      
    # ____________________________________________
    - name: Compile OpenVisus 
      shell: bash
      run: |
           set -e  # stop or error
           set -x  # very verbose        
      
           docker run -d -it --name mydocker \
              -e PYTHON_VERSION=${{ matrix.python-version }} \
              -e Qt5_DIR=/opt/qt59 \
              -e PYPI_USERNAME=${{ secrets.PYPI_USERNAME }} \
              -e PYPI_PASSWORD=${{ secrets.PYPI_PASSWORD }} \
              -v $(pwd):/root/OpenVisus \
              -w /root/OpenVisus \
              visus/portable-linux-binaries \
              /bin/bash 
              
           docker exec mydocker /bin/bash -c "./scripts/build_linux.sh"
           
           # fix permissions (see https://unix.stackexchange.com/questions/29902/unable-to-delete-file-even-when-running-as-root)
           sudo chown -R root:root  ./build
           sudo chmod -R a+rwx      ./build
           
    # ____________________________________________
    - name: Install Miniconda 
      uses: goanpeca/setup-miniconda@v1
      with:
        miniconda-version: 'latest'    
        python-version: ${{ matrix.python-version }}
        
    # ____________________________________________
    - name: Build OpenVisus conda package
      if: matrix.python-version != '3.8' 
      shell: bash -l {0}
      run: |
           cd build/Release/OpenVisus 
           conda update -n base -c defaults conda
           chmod a+x ./scripts/build_conda.sh
           ANACONDA_TOKEN=${{ secrets.ANACONDA_TOKEN }} PYTHON_VERSION=${{ matrix.python-version }} LINUX_FIX_RANDOM_CRASH=1 ./scripts/build_conda.sh
           
