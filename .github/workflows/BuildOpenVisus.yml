name: BuildOpenVisus

on: [push]

jobs:

  # ///////////////////////////////////////////////////////////////
  Build:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  
      matrix:
        python-version: [ '3.6', '3.7', '3.8',  ] 
        os: ["windows-latest", "macos-latest", "ubuntu-latest"]
        python-type: ["cpython", "conda"]
        exclude:
           - python-version: 3.8
             os: windows-latest
             python-type: conda
           - python-version: 3.8
             os: macos-latest
             python-type: conda
           - python-version: 3.8
             os: ubuntu-latest
             python-type: conda
             
    steps:
    
    # ____________________________________________
    - name: Install CMake
      uses: lukka/get-cmake@latest
      
    # ____________________________________________
    - name: Install Swig for windows
      if: matrix.os == 'windows-latest'
      uses: crazy-max/ghaction-chocolatey@v1
      with:
        args: install -y --allow-empty-checksums --no-progress swig
        
    # ____________________________________________  
    - name: Install Swig for macos
      if: matrix.os == 'macos-latest'
      run: brew install swig
           
    # ____________________________________________  
    - name: Install SDK 10.9 for macos 
      if: matrix.os == 'macos-latest'
      uses: nick-invision/retry@v1
      with:
        max_attempts: 3
        timeout_minutes: 5
        retry_wait_seconds: 5
        command: 'cd /tmp && rm -Rf MacOSX-SDKs && git clone https://github.com/phracker/MacOSX-SDKs.git '
           
    # ____________________________________________
    - name: Install CPython 
      if: matrix.python-type == 'cpython'
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }} 
        architecture: 'x64'
        
    # ____________________________________________
    - name: Install Miniconda 
      if: matrix.python-type == 'conda'
      uses: goanpeca/setup-miniconda@v1
      with:
        miniconda-version: 'latest'    
        python-version: ${{ matrix.python-version }}
        activate-environment: tmp
        auto-update-conda: true

    # ____________________________________________
    - name: Configure Miniconda and install pyqt
      if: matrix.python-type == 'conda'
      shell: bash -l {0}
      run: |
           conda config --set always_yes yes --set changeps1 no --set anaconda_upload no   1>/dev/null
           conda install conda pyqt                                                        1>/dev/null

    # ____________________________________________
    - name: Install Qt for windows
      if: matrix.os == 'windows-latest' && matrix.python-type == 'cpython'
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.12.8'
        arch: 'win64_msvc2017_64'
        install-deps: 'true'  
        dir: C:\
        
     # ____________________________________________
    - name: Install Qt for macos
      if: matrix.os == 'macos-latest' && matrix.python-type == 'cpython'
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.12.8'
        target: 'desktop'
        install-deps: 'true'  
        dir: /tmp

    # ____________________________________________
    - name: Install glu on ubuntu
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: sudo apt-get install libglu1-mesa-dev 1>/dev/null

    # ____________________________________________
    - name: git clone OpenVisus
      uses: actions/checkout@v2
      
    # ____________________________________________
    - name: git clone visuscpp
      uses: nick-invision/retry@v1
      with:
        max_attempts: 3
        timeout_minutes: 4
        retry_wait_seconds: 5
        command: 'rm -Rf Libs/slamcpp && git clone https://${{ secrets.VISUS_SLAM_ACCESS_TOKEN }}@github.com/sci-visus/slamcpp.git Libs/slamcpp'

    # ____________________________________________
    - name: git clone opsray for windows
      if: matrix.os == 'windows-latest'
      uses: nick-invision/retry@v1
      with:
        max_attempts: 3
        timeout_minutes: 4
        retry_wait_seconds: 5
        command: 'rm -Rf ExternalLibs/ospray_win && git clone https://github.com/sci-visus/ospray_win.git  ExternalLibs/ospray_win'

    # ____________________________________________
    - name: Compile OpenVisus on windows
      if: matrix.os == 'windows-latest'    
      shell: bash -l {0}
      run: |
           if [[  "${{ matrix.python-type }}" == "cpython" ]] ; then Python_EXECUTABLE=${pythonLocation}/python.exe ; fi
           if [[  "${{ matrix.python-type }}" == "conda"   ]] ; then Python_EXECUTABLE=$(which python)              ; fi
           if [[  "${{ matrix.python-type }}" == "conda"   ]] ; then Qt5_Dir=${CONDA_PREFIX}/Library ; fi
           mkdir -p build
           cd build
           cmake -G "Visual Studio 16 2019" -A "x64" -DQt5_DIR="${Qt5_Dir}/lib/cmake/Qt5" -DPython_EXECUTABLE=${Python_EXECUTABLE} -DSWIG_EXECUTABLE=C:/ProgramData/chocolatey/bin/swig.exe ../
           cmake --build . --target ALL_BUILD --config Release --parallel 4
           cmake --build . --target install   --config Release

    # ____________________________________________
    - name: Compile OpenVisus on macos
      if: matrix.os == 'macos-latest'
      shell: bash -l {0}
      run: |
           if [[  "${{ matrix.python-type }}" == "cpython" ]] ; then Python_EXECUTABLE=${pythonLocation}/python ; fi
           if [[  "${{ matrix.python-type }}" == "conda"   ]] ; then Python_EXECUTABLE=$(which python)          ; fi
           if [[  "${{ matrix.python-type }}" == "conda"   ]] ; then Qt5_Dir=${CONDA_PREFIX} ; fi
           mkdir -p build
           cd build
           cmake -GXcode -DQt5_DIR="${Qt5_Dir}/lib/cmake/Qt5" -DCMAKE_OSX_SYSROOT="/tmp/MacOSX-SDKs/MacOSX10.9.sdk" -DPython_EXECUTABLE=${Python_EXECUTABLE}  ../
           cmake --build ./ --target ALL_BUILD --config Release --parallel 4 
           cmake --build ./ --target install   --config Release 

    # ____________________________________________
    - name: Compile OpenVisus on ubuntu
      if: matrix.os == 'ubuntu-latest' 
      shell: bash -l {0}
      run: |
           if [[ "${{ matrix.python-type }}" == "cpython" ]] ; then Qt5_DIR=/opt/qt512  ; fi
           if [[ "${{ matrix.python-type }}" == "conda"   ]] ; then Qt5_DIR=/opt/qt59   ; fi
           docker run -e PYTHON_VERSION=${{ matrix.python-version }} -e Qt5_DIR=$Qt5_DIR -v ${PWD}:${PWD}  -w ${PWD} visus/portable-linux-binaries /bin/bash -c "./scripts/build_linux.sh"
           sudo chown -R root:root  build
           sudo chmod -R a+rwx      build

    # ____________________________________________
    - name: Test OpenVisus on cpython
      if: matrix.python-type == 'cpython'
      shell: bash
      run: |
           set -x
           which python
           cd build/Release/OpenVisus
           export PYTHONPATH=../
           ${pythonLocation}/python  -m OpenVisus configure  || true  # segmentation fault problem on linux
           ${pythonLocation}/python  -m OpenVisus test
           ${pythonLocation}/python  -m OpenVisus test-gui 

    # ____________________________________________
    - name: Test OpenVisus on conda
      if: matrix.python-type == 'conda'
      shell: bash -l {0}
      run: |
           set -x
           which python
           cd build/Release/OpenVisus
           export PYTHONPATH=../
           python -m OpenVisus configure  || true  # segmentation fault problem on linux
           python -m OpenVisus test
           python -m OpenVisus test-gui

    # ____________________________________________
    - name: Distrib OpenVisus on pypi
      if: matrix.python-type == 'cpython'
      shell: bash
      run: |
           GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || true)
           if [[ "${GIT_TAG}" != "" ]] ; then
             cd build/Release/OpenVisus
             Version=${{ matrix.python-version }}
             if [[  "${{ matrix.os }}" == "windows-latest" ]] ; then PLATFORM_NAME=win_amd64            ; fi
             if [[  "${{ matrix.os }}" == "macos-latest"   ]] ; then PLATFORM_NAME=macosx_10_9_x86_64   ; fi
             if [[  "${{ matrix.os }}" == "ubuntu-latest"  ]] ; then PLATFORM_NAME=manylinux2010_x86_64 ; fi             
             ${pythonLocation}/python -m pip install setuptools wheel twine --upgrade 1>/dev/null || true
             ${pythonLocation}/python setup.py -q bdist_wheel --python-tag=cp${Version:0:1}${Version:2:1} --plat-name=${PLATFORM_NAME}
             ${pythonLocation}/python -m twine upload --username ${{ secrets.PYPI_USERNAME }} --password ${{ secrets.PYPI_PASSWORD }} --skip-existing  "dist/*.whl" 
           fi               

    # ____________________________________________
    - name: Distrib OpenVisus on conda
      if: matrix.python-type == 'conda'
      shell: bash -l {0}   
      run: |
           GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || true)
           if [[ "${GIT_TAG}" != ""  ]] ; then
             cd build/Release/OpenVisus
             conda install anaconda-client conda-build 1>/dev/null || true #conda-build is needed for 'bdist_conda'
             rm -Rf $(find ${CONDA_PREFIX} -iname "openvisus*.tar.bz2")  || true
             python setup.py -q bdist_conda 1>/dev/null
             CONDA_FILENAME=$(find ${CONDA_PREFIX} -iname "openvisus*.tar.bz2"  | head -n 1) 
             anaconda --verbose --show-traceback  -t ${{ secrets.ANACONDA_TOKEN }}   upload "${CONDA_FILENAME}"
           fi

  # ///////////////////////////////////////////////////////////////
  BuildMin:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  
      matrix:
        python-version: [ '3.6' ] 
        os: ["windows-latest", "macos-latest", "ubuntu-latest"]

    steps:
    
    # ____________________________________________
    - name: Install CMake
      uses: lukka/get-cmake@latest
      
    # ____________________________________________
    - name: Install mingw for windows
      if: matrix.os == 'windows-latest'
      uses: crazy-max/ghaction-chocolatey@v1
      with:
        args: install -y --allow-empty-checksums --no-progress mingw
        
    # ____________________________________________
    - name: Install gcc for macos
      if: matrix.os == 'macos-latest'
      shell: bash 
      run: brew install gcc@9
      
    # ____________________________________________
    - name: git clone OpenVisus
      uses: actions/checkout@v2
      
    # ____________________________________________
    - name: Compile OpenVisus on mingw
      if: matrix.os == 'windows-latest'
      shell: cmd 
      run: |
           set PATH=%PATH%:c:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin
           mkdir -p build
           cd build
           cmake -G "MinGW Makefiles" -DVISUS_MINIMAL=1 ../ 
           cmake --build . --target all       --config Release --parallel 4
           cmake --build . --target install   --config Release
         
    # ____________________________________________
    - name: Compile OpenVisus on macos
      if: matrix.os == 'macos-latest'    
      shell: bash 
      run: |
           export CC=$(brew --prefix gcc@9)/bin/gcc-9
           export CXX=$(brew --prefix gcc@9)/bin/g++-9
           mkdir build 
           cd build
           cmake -G"Unix Makefiles" -DVISUS_MINIMAL=1 ../
           make -j 
           make install
           
    # ____________________________________________
    - name: Compile OpenVisus on ubuntu
      if: matrix.os == 'ubuntu-latest'
      shell: bash 
      run: |
           mkdir build 
           cd build 
           cmake -DVISUS_MINIMAL=1 ../
           make -j
           make install
           