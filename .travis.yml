
language: cpp

sudo: required	

notifications:
  email:
    recipients:
      - scrgiorgio@gmail.com
    on_success: always
    on_failure: always 
    
env:
  global:
    - BUILD_TYPE=RelWithDebInfo 
    - PYPI_USERNAME=scrgiorgio
    - secure: EAZwSiQCFdTjcKDmHLFpWgX7WnGKwTtptkTvXYLcMPSUMxGymTCOTI1h8jjhxGig3k4Jni1X1gx9c8+LkcMd/yjbzDiOnIjCAVRc1hmCijAgu9j3G1ZMll4E38T7Iq6jE3/DZyb7pfK3X4NQopF/5uySIGeoH25CHwcNyr36k8Ba+qYtanPwTG1D+EVIago8qqL5yG5rslAf7Y69+zVbNa/JAUhow4fw0RAwVp+kgMC7Fj7iSMuN4NmS176VZEjD593zbiBgW+veEN0Z2MLD4vG7nq+w5u5JJYuz+Q4EiB5CCek5hhj17fJMWuAA23RZAlq4X/2oS5bKg/etHK5iVeM8ODKBX2bBHOxQoqwOaOVf0sEs5ranwVLR/77FrhFEECKAmkfFHwGGViWTvdE+F/7XqjLQK9Zm2f+T+rMHxrm1RknbXz271TNahqCHnMsmpaz98WbBHjdp2aQfU+nV/l6XLJnAf0R58ISiVdnDOy3BgQsiWIyxjZc6gRSwLg6EzAS2XlgQOmXhDo8lYoaepuK4OWvdIf+bqw0Y3b0uvrpHlAEpIG0tzzZw6ldq3CdvKD+46Vz+ZtEQBi0GBPy1Env1RHILzlkUwn6LSjVnKYY/TZxIi4ha73yo2BwJ1Q6hpdjVFgHJkEY3a72UCnOBIVnaalGv9lu/EjaixrnU6Nc=  
  
matrix:

  include:

    # ///////////////////////////////// osx 10.13
    
    - os: osx
      osx_image: xcode9.4 #10.13
      compiler: clang
      env: [APPLE_OSX_VERSION=10.13,COMPILER=clang++,PYTHON_VERSION=2.7.15] 
      
    - os: osx
      osx_image: xcode9.4 #10.13
      compiler: clang
      env: [APPLE_OSX_VERSION=10.13,COMPILER=clang++,PYTHON_VERSION=3.6.6]                   
          
    - os: osx
      osx_image: xcode9.4 
      compiler: clang
      env: [APPLE_OSX_VERSION=10.13,COMPILER=clang++,PYTHON_VERSION=3.7.0 ]
      
    # ///////////////////////////////// osx 10.12
    
    - os: osx
      osx_image: xcode8.3
      compiler: clang
      env: [APPLE_OSX_VERSION=10.12,COMPILER=clang++,PYTHON_VERSION=2.7.15]    
            
    - os: osx
      osx_image: xcode8.3
      compiler: clang
      env: [APPLE_OSX_VERSION=10.12,COMPILER=clang++,PYTHON_VERSION=3.6.6]    

    - os: osx
      osx_image: xcode8.3
      compiler: clang
      env: [APPLE_OSX_VERSION=10.12,COMPILER=clang++,PYTHON_VERSION=3.7.0]      
      
    # ///////////////////////////////// Ubuntu 14.04 
    
    - os: linux
      dist: trusty
      env: [COMPILER=g++-4,PYTHON_VERSION=2.7]
      addons: 
        apt:
          packages: ['g++-4']
          sources: ['ubuntu-toolchain-r-test']       
          
    - os: linux
      dist: trusty
      env: [COMPILER=g++-4,PYTHON_VERSION=3.4]
      addons: 
        apt:
          packages: ['g++-4']
          sources: ['ubuntu-toolchain-r-test']
         
    - os: linux
      dist: trusty
      env: [COMPILER=g++-4,PYTHON_VERSION=3.5]
      addons: 
        apt:
          packages: ['g++-4']
          sources: ['ubuntu-toolchain-r-test']
                    
    - os: linux
      dist: trusty
      env: [COMPILER=g++-4,PYTHON_VERSION=3.6]    
      addons: 
        apt:
          packages: ['g++-4']
          sources: ['ubuntu-toolchain-r-test']
    
script:
    - | 
      if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then   
     
     		# python
        brew install pyenv 
        export PATH="$HOME/.pyenv/bin:$PATH"
        eval "$(pyenv init -)"
        eval "$(pyenv virtualenv-init -)"
        CONFIGURE_OPTS=--enable-shared pyenv install -s $PYTHON_VERSION    
        CONFIGURE_OPTS=--enable-shared pyenv global     $PYTHON_VERSION
        python -m pip install --upgrade pip
        python -m pip install numpy setuptools wheel twine          
        
        #  brew install dependencies
        brew install swig qt5 
        QT5_DIR=/usr/local/opt/qt/lib/cmake/Qt5
        gem install xcpretty    # this is to solve logs too long          
        
        PYTHON_HOME=$HOME/.pyenv/versions/${PYTHON_VERSION}
        PYTHON_EXECUTABLE=${PYTHON_HOME}/bin/python
        PYTHON_M=""
        if [ ${PYTHON_VERSION:0:1} -gt 2 ] ; then PYTHON_M=m ; fi
        PYTHON_INCLUDE_DIR=${PYTHON_HOME}/include/python${PYTHON_VERSION:0:3}${PYTHON_M}
        PYTHON_LIBRARY=${PYTHON_HOME}/lib/libpython${PYTHON_VERSION:0:3}${PYTHON_M}.dylib               

        cd "${TRAVIS_BUILD_DIR}" && mkdir build && cd build      
        cmake -GXcode -DPYTHON_VERSION=${PYTHON_VERSION} -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE} -DPYTHON_INCLUDE_DIR=${PYTHON_INCLUDE_DIR} -DPYTHON_LIBRARY=${PYTHON_LIBRARY} -DQt5_DIR=${QT5_DIR} ../
        set -o pipefail &&  cmake --build ./ --target ALL_BUILD --config $BUILD_TYPE | xcpretty -c
        cmake --build ./                     --target RUN_TESTS --config $BUILD_TYPE
        cmake --build ./                     --target install   --config $BUILD_TYPE
        cmake --build ./                     --target dist      --config $BUILD_TYPE      
      fi 
      
    - |     
      if [[ ${TRAVIS_OS_NAME} == "linux" ]]; then 
      
        # python
        cd $HOME     
        curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer -O 
        chmod a+x pyenv-installer 
        ./pyenv-installer 
        rm ./pyenv-installer 
        export PATH="$HOME/.pyenv/bin:$PATH"
        eval "$(pyenv init -)"
        eval "$(pyenv virtualenv-init -)"
        CONFIGURE_OPTS=--enable-shared pyenv install -s $PYTHON_VERSION    
        CONFIGURE_OPTS=--enable-shared pyenv global     $PYTHON_VERSION 
        python -m pip install --upgrade pip
        python -m pip install numpy setuptools wheel twine              
      
        #  build dependencies    
        sudo add-apt-repository -y ppa:deadsnakes/ppa
        sudo apt-get -qy update
        sudo apt-get -qy install --allow-unauthenticated swig3.0 git cmake libssl-dev uuid-dev libx11-xcb1 
        
        # qt 5.9.1
        sudo add-apt-repository ppa:beineri/opt-qt591-trusty -y; 
        sudo apt-get update -qq
        sudo apt-get install -qq qt59base
        source /opt/qt59/bin/qt59-env.sh  
          
        # cmake
        CMAKE_URL="http://www.cmake.org/files/v3.4/cmake-3.4.3-Linux-x86_64.tar.gz"
        mkdir -p ${TRAVIS_BUILD_DIR}/deps/cmake
        travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C ${TRAVIS_BUILD_DIR}/deps/cmake
        export PATH=${TRAVIS_BUILD_DIR}/deps/cmake/bin:${PATH}   
        
        PYTHON_HOME=$HOME/.pyenv/versions/${PYTHON_VERSION}
        PYTHON_EXECUTABLE=${PYTHON_HOME}/bin/python
        PYTHON_M=""
        if [ ${PYTHON_VERSION:0:1} -gt 2 ] ; then PYTHON_M=m ; fi        
        PYTHON_INCLUDE_DIR=${PYTHON_HOME}/include/python${PYTHON_VERSION:0:3}${PYTHON_M}
        PYTHON_LIBRARY=${PYTHON_HOME}/lib/libpython${PYTHON_VERSION:0:3}${PYTHON_M}.so     
                 
        cd "${TRAVIS_BUILD_DIR}" && mkdir build && cd build  
        cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DPYTHON_VERSION=${PYTHON_VERSION} -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE} -DPYTHON_INCLUDE_DIR=${PYTHON_INCLUDE_DIR} -DPYTHON_LIBRARY=${PYTHON_LIBRARY} ../
        cmake --build ./ --target all
        cmake --build ./ --target test
        cmake --build ./ --target install
        cmake --build ./ --target dist         
        
      fi    

before_deploy:
  - export DEPLOY_FILENAME=$(ls ${TRAVIS_BUILD_DIR}/build/install/dist/*.whl) 

deploy:
  provider: releases
  api_key:
    secure: vvs+N/XwsigYj6pZIR0Lksg+FnA2M7bCy4aHj7at1nPOtX3ZHHdkSgIyd06awkiWSNg++fM6GIi7ewU+ftX9rGxgRFG5eWIKQyuHHPvNSIIcJe1cY7440Y6Kb2p58BFeGQxLJl0y3XlCObPW7yMoY7h9i6kTL6w7k3NkdWkFpdDaNXXEaGnzeoaM6u+iBmgAWgX9Ozlu+ogjFpw5b7QPtKgi1Bey/IbIeVWExuFnXsTJe3MDobdFvgJ0tewErnWAey3V8IXQzVMqdOIAl+xtu3RMmsdNymDAZpof31wFNLCr7BMmIg/O2QW1tnvNXuFX9Gpry5CKb7i0oxthiLyNTkh2sZQcAJcBdWJlP4LiSCBoJ2HuAc5XSqss8aXt/hHAzL3ICPtd6wVPlHEMK1+/EsC4WcO5X0ngzmGnn8eceIBFJiqYhI+c85GqUWPrFw+REKUsAwthMK0tNErruWZR1uubYnlyQYHpSaPdKie6o0aWK8Xit+GN3jkcqRrhQDwX3WFLxw2N07eh/f3vCD4m7GwRJfi5LXDuoLp3Qg5w23gi4ewp71v9oTZNT4K3vVEYuwzCyglppjyszQDvBAwxgxnWtSZh2nGEtwtDL5dRiIXehqfaK7mRKQ8iZwpQkuyTD+rsl45nTuNjeKYC3BLHd+NZhJI8qmcD6oykt+oxzjg=
  file: ${DEPLOY_FILENAME}
  skip_cleanup: true
  on:
    repo: sci-visus/OpenVisus
    tags: true
    all_branches: true

after_deploy:
  - echo "[distutils]"                > $HOME/.pypirc
  - echo "index-servers ="           >> $HOME/.pypirc
  - echo "    pypi"                  >> $HOME/.pypirc
  - echo "[pypi]"                    >> $HOME/.pypirc
  - echo "username=$PYPI_USERNAME"   >> $HOME/.pypirc
  - echo "password=$PYPI_PASSWORD"   >> $HOME/.pypirc
  - if [ -n "$TRAVIS_TAG" ]; then python -m twine upload --skip-existing $DEPLOY_FILENAME ; else echo "Not on a tag, won't deploy to pypi" ; fi


